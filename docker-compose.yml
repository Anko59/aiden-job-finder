services:
  aiden_app:
    build: .
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.aiden.rule=Host(`aiden.dev.localhost`)"
      - "traefik.http.services.aiden.loadbalancer.server.port=8000"
    networks:
      - aiden_network
    volumes:
      - ./aiden_app:/app/aiden_app
      - ./aiden_project:/app/aiden_project
      - ./manage.py:/app/manage.py
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgres://${DATABASE_USER}:${DATABASE_PASSWORD}@${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_NAME}
    depends_on:
      djangodb:
        condition: service_healthy

  djangodb:
    image: postgres
    environment:
      - POSTGRES_DB=${DATABASE_NAME}
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
    volumes:
      - django_postgres_data:/var/lib/postgresql/data/
    networks:
      - aiden_network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DATABASE_USER}", "-d", "${DATABASE_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  aidendb:
    image: postgres
    environment:
      - POSTGRES_DB=${AIDEN_DATABASE_NAME}
      - POSTGRES_USER=${AIDEN_DATABASE_USER}
      - POSTGRES_PASSWORD=${AIDEN_DATABASE_PASSWORD}
    volumes:
      - aiden_postgres_data:/var/lib/postgresql/data/
    networks:
      - aiden_network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${AIDEN_DATABASE_USER}", "-d", "${AIDEN_DATABASE_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  traefik:
    image: "traefik:v2.6"
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
    networks:
      - aiden_network
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"

  pgweb:
    image: sosedoff/pgweb
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgweb.rule=Host(`pgweb.dev.localhost`)"
      - "traefik.http.services.pgweb.loadbalancer.server.port=8081"
    environment:
      - DATABASE_URL=postgres://${AIDEN_DATABASE_USER}:${AIDEN_DATABASE_PASSWORD}@db:5432/${DATABASE_NAME}?sslmode=disable
      - DATABASE_READ_ONLY=true
    networks:
      - aiden_network
    depends_on:
      aidendb:
        condition: service_healthy

  qdrant:
    image: qdrant/qdrant
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.qdrant.rule=Host(`qdrant.dev.localhost`)"
      - "traefik.http.services.qdrant.loadbalancer.server.port=6333" # Adjust port as needed
    networks:
      - aiden_network
    environment:
      - QDRANT_STORAGE_DIR=/data  # Adjust path if needed


  aiden-scraper:
    build: ./aiden-scraper
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.aiden-scraper.rule=Host(`aiden-scraper.dev.localhost`)"
      - "traefik.http.services.aiden-scraper.loadbalancer.server.port=8080"
    networks:
      - aiden_network
    depends_on:
      aidendb:
        condition: service_healthy
volumes:
  aiden_postgres_data:
  django_postgres_data:

networks:
  aiden_network:
    driver: bridge
