services:
  aiden_app:
    build: ./aiden-web
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.aiden.rule=Host(`aiden.dev.localhost`)"
      - "traefik.http.services.aiden.loadbalancer.server.port=8000"
    networks:
      - aiden_network
    volumes:
      - ./aiden-web/aiden_app:/app/aiden_app
      - ./aiden-web/aiden_project:/app/aiden_project
      - ./aiden-web/manage.py:/app/manage.py
      - ./aiden-web/media:/app/media
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgres://${DATABASE_USER}:${DATABASE_PASSWORD}@${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_NAME}
    depends_on:
      db:
        condition: service_healthy
      aiden-scraper:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 1g
  media_server:
    image: nginx:alpine
    volumes:
      - ./aiden-web/media:/usr/share/nginx/html
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.media.rule=Host(`aiden.dev.localhost`) && PathPrefix(`/media`)"
      - "traefik.http.middlewares.media-stripprefix.stripprefix.prefixes=/media"
      - "traefik.http.routers.media.middlewares=media-stripprefix"
      - "traefik.http.services.media.loadbalancer.server.port=80"
    networks:
      - aiden_network
  db:
    image: postgres
    environment:
      - POSTGRES_DB=${DATABASE_NAME}
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - aiden_network
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-U",
          "${DATABASE_USER}",
          "-d",
          "${DATABASE_NAME}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512m

  traefik:
    image: "traefik:v2.9"
    command:
      - --entrypoints.web.address=:80
      - --providers.docker=true
      - --api.insecure # Don't do that in production
      - --log
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - aiden_network
    deploy:
      resources:
        limits:
          memory: 512m

  pgweb:
    image: sosedoff/pgweb
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgweb.rule=Host(`pgweb.dev.localhost`)"
      - "traefik.http.services.pgweb.loadbalancer.server.port=8081"
    environment:
      - PGWEB_DATABASE_URL=postgres://${DATABASE_USER}:${DATABASE_PASSWORD}@db:5432/${DATABASE_NAME}?sslmode=disable
      - DATABASE_READ_ONLY=true
    networks:
      - aiden_network
    depends_on:
      db:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 512m

  qdrant:
    image: qdrant/qdrant
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.qdrant.rule=Host(`qdrant.dev.localhost`)"
      - "traefik.http.services.qdrant.loadbalancer.server.port=6333" # Adjust port as needed
    networks:
      - aiden_network
    environment:
      - QDRANT_STORAGE_DIR=/data # Adjust path if needed
    deploy:
      resources:
        limits:
          memory: 4g
  aiden-scraper:
    build: ./aiden-scraper
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.scraper.rule=Host(`scraper.dev.localhost`)"
      - "traefik.http.services.scraper.loadbalancer.server.port=8082"
    environment:
      - REDIS_URL=redis://redis:6379
      - QDRANT_URL=http://qdrant:6333
    networks:
      - aiden_network
    volumes:
      - ./aiden-scraper/aiden_scraper:/app/aiden_scraper
    command:
      [
        "poetry",
        "run",
        "uvicorn",
        "aiden_scraper.main:app",
        "--host",
        "0.0.0.0",
        "--port",
        "8082",
        "--reload",
      ]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8082/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 1g
    depends_on:
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
  redis:
    image: redis:alpine
    command:
      [
        "redis-server",
        "--appendonly",
        "no",
        "--maxmemory",
        "118mb",
        "--maxmemory-policy",
        "allkeys-lru",
      ]
    networks:
      - aiden_network
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 128M
volumes:
  postgres_data:

networks:
  aiden_network:
    driver: bridge
