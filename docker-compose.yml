services:
  aiden_app:
    build: .
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.aiden.rule=Host(`aiden.dev.localhost`)"
      - "traefik.http.services.aiden.loadbalancer.server.port=8000"
    networks:
      - aiden_network
    volumes:
      - ./aiden_app:/app/aiden_app
      - ./aiden_project:/app/aiden_project
      - ./manage.py:/app/manage.py
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgres://${DATABASE_USER}:${DATABASE_PASSWORD}@${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_NAME}
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres
    environment:
      - POSTGRES_DB=${DATABASE_NAME}
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - aiden_network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DATABASE_USER}", "-d", "${DATABASE_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  traefik:
    image: "traefik:v2.9"
    command:
      - --entrypoints.web.address=:80
      - --providers.docker=true
      - --api.insecure # Don't do that in production
      - --log
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - aiden_network

  pgweb:
    image: sosedoff/pgweb
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgweb.rule=Host(`pgweb.dev.localhost`)"
      - "traefik.http.services.pgweb.loadbalancer.server.port=8081"
    environment:
      - PGWEB_DATABASE_URL=postgres://${DATABASE_USER}:${DATABASE_PASSWORD}@db:5432/${DATABASE_NAME}?sslmode=disable
      - DATABASE_READ_ONLY=true
    networks:
      - aiden_network
    depends_on:
      db:
        condition: service_healthy

  qdrant:
    image: qdrant/qdrant
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.qdrant.rule=Host(`qdrant.dev.localhost`)"
      - "traefik.http.services.qdrant.loadbalancer.server.port=6333" # Adjust port as needed
    networks:
      - aiden_network
    environment:
      - QDRANT_STORAGE_DIR=/data  # Adjust path if needed


  aiden-scraper:
    build: ./aiden-scraper
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.scraper.rule=Host(`scraper.dev.localhost`)"
      - "traefik.http.services.scraper.loadbalancer.server.port=8082"
    networks:
      - aiden_network
    volumes:
      - ./aiden-scraper/aiden_scraper:/app/aiden_scraper
    command: ["poetry", "run", "uvicorn", "aiden_scraper.main:app", "--host", "0.0.0.0", "--port", "8082"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8082/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      replicas: 1
volumes:
  postgres_data:

networks:
  aiden_network:
    driver: bridge
